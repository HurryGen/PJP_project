//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/PJP/PJP/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="ILanguageListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class LanguageBaseListener : ILanguageListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] LanguageParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] LanguageParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] LanguageParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] LanguageParser.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] LanguageParser.DeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableList([NotNull] LanguageParser.VariableListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableList([NotNull] LanguageParser.VariableListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.readStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStatement([NotNull] LanguageParser.ReadStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.readStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStatement([NotNull] LanguageParser.ReadStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.writeStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteStatement([NotNull] LanguageParser.WriteStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.writeStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteStatement([NotNull] LanguageParser.WriteStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fopenStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFopenStatement([NotNull] LanguageParser.FopenStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fopenStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFopenStatement([NotNull] LanguageParser.FopenStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBlock([NotNull] LanguageParser.BlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBlock([NotNull] LanguageParser.BlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] LanguageParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] LanguageParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>uminusExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUminusExpr([NotNull] LanguageParser.UminusExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>uminusExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUminusExpr([NotNull] LanguageParser.UminusExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterOrExpr([NotNull] LanguageParser.OrExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitOrExpr([NotNull] LanguageParser.OrExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParensExpr([NotNull] LanguageParser.ParensExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParensExpr([NotNull] LanguageParser.ParensExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterVariableExpr([NotNull] LanguageParser.VariableExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitVariableExpr([NotNull] LanguageParser.VariableExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterEqExpr([NotNull] LanguageParser.EqExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitEqExpr([NotNull] LanguageParser.EqExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNotExpr([NotNull] LanguageParser.NotExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNotExpr([NotNull] LanguageParser.NotExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>fileOutputExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFileOutputExpr([NotNull] LanguageParser.FileOutputExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>fileOutputExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFileOutputExpr([NotNull] LanguageParser.FileOutputExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAddExpr([NotNull] LanguageParser.AddExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAddExpr([NotNull] LanguageParser.AddExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteralExpr([NotNull] LanguageParser.LiteralExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteralExpr([NotNull] LanguageParser.LiteralExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterMulExpr([NotNull] LanguageParser.MulExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitMulExpr([NotNull] LanguageParser.MulExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRelExpr([NotNull] LanguageParser.RelExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRelExpr([NotNull] LanguageParser.RelExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignExpr([NotNull] LanguageParser.AssignExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignExpr([NotNull] LanguageParser.AssignExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAndExpr([NotNull] LanguageParser.AndExprContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAndExpr([NotNull] LanguageParser.AndExprContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLiteral([NotNull] LanguageParser.LiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLiteral([NotNull] LanguageParser.LiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionList([NotNull] LanguageParser.ExpressionListContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionList([NotNull] LanguageParser.ExpressionListContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] LanguageParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] LanguageParser.TypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace ANTLR
