//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/PJP/PJP/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="LanguageParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] LanguageParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] LanguageParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.variableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableList([NotNull] LanguageParser.VariableListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.variableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableList([NotNull] LanguageParser.VariableListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.readStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStatement([NotNull] LanguageParser.ReadStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.readStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStatement([NotNull] LanguageParser.ReadStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.writeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStatement([NotNull] LanguageParser.WriteStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.writeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStatement([NotNull] LanguageParser.WriteStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.fopenStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFopenStatement([NotNull] LanguageParser.FopenStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.fopenStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFopenStatement([NotNull] LanguageParser.FopenStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] LanguageParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] LanguageParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>uminusExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUminusExpr([NotNull] LanguageParser.UminusExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>uminusExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUminusExpr([NotNull] LanguageParser.UminusExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParensExpr([NotNull] LanguageParser.ParensExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParensExpr([NotNull] LanguageParser.ParensExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterVariableExpr([NotNull] LanguageParser.VariableExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitVariableExpr([NotNull] LanguageParser.VariableExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEqExpr([NotNull] LanguageParser.EqExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEqExpr([NotNull] LanguageParser.EqExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>fileOutputExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFileOutputExpr([NotNull] LanguageParser.FileOutputExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>fileOutputExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFileOutputExpr([NotNull] LanguageParser.FileOutputExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddExpr([NotNull] LanguageParser.AddExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddExpr([NotNull] LanguageParser.AddExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteralExpr([NotNull] LanguageParser.LiteralExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteralExpr([NotNull] LanguageParser.LiteralExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulExpr([NotNull] LanguageParser.MulExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulExpr([NotNull] LanguageParser.MulExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignExpr([NotNull] LanguageParser.AssignExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignExpr([NotNull] LanguageParser.AssignExprContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLiteral([NotNull] LanguageParser.LiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLiteral([NotNull] LanguageParser.LiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionList([NotNull] LanguageParser.ExpressionListContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionList([NotNull] LanguageParser.ExpressionListContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] LanguageParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] LanguageParser.TypeContext context);
}
} // namespace ANTLR
