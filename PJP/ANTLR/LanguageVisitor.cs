//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Projects/PJP/PJP/Language.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ANTLR {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="LanguageParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public interface ILanguageVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] LanguageParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] LanguageParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] LanguageParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.variableList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableList([NotNull] LanguageParser.VariableListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.readStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReadStatement([NotNull] LanguageParser.ReadStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.writeStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWriteStatement([NotNull] LanguageParser.WriteStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.fopenStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFopenStatement([NotNull] LanguageParser.FopenStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] LanguageParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] LanguageParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] LanguageParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>uminusExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitUminusExpr([NotNull] LanguageParser.UminusExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>orExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrExpr([NotNull] LanguageParser.OrExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>parensExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParensExpr([NotNull] LanguageParser.ParensExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>variableExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitVariableExpr([NotNull] LanguageParser.VariableExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>eqExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEqExpr([NotNull] LanguageParser.EqExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>notExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNotExpr([NotNull] LanguageParser.NotExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>fileOutputExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFileOutputExpr([NotNull] LanguageParser.FileOutputExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>addExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddExpr([NotNull] LanguageParser.AddExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>literalExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteralExpr([NotNull] LanguageParser.LiteralExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>mulExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulExpr([NotNull] LanguageParser.MulExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>relExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelExpr([NotNull] LanguageParser.RelExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>assignExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignExpr([NotNull] LanguageParser.AssignExprContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>andExpr</c>
	/// labeled alternative in <see cref="LanguageParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAndExpr([NotNull] LanguageParser.AndExprContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.literal"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLiteral([NotNull] LanguageParser.LiteralContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.expressionList"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionList([NotNull] LanguageParser.ExpressionListContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="LanguageParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] LanguageParser.TypeContext context);
}
} // namespace ANTLR
